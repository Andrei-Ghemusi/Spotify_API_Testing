{
	"info": {
		"_postman_id": "62d6c993-265e-4e29-8d35-0818f2e2d99c",
		"name": "Spotify_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26691678"
	},
	"item": [
		{
			"name": "Artists",
			"item": [
				{
					"name": "Equivalence partitioning",
					"item": [
						{
							"name": "Positive Testing",
							"item": [
								{
									"name": "Get current followed artists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json()\r",
													"pm.test(\"Response is an object\", () => {\r",
													"    pm.expect(response).to.be.an(\"object\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains \\\"artists\\\"\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check If User Follows Artists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/me/following/contains?type=artist&ids=2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,3TVXtAsR1Inumwj472S9r4,1cXi8ALPQCBHZbf0EgP4Ey,4MCBfE4596Uoi2O4DtmEMz",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following",
												"contains"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,3TVXtAsR1Inumwj472S9r4,1cXi8ALPQCBHZbf0EgP4Ey,4MCBfE4596Uoi2O4DtmEMz"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Type should be artist\", function () {\r",
													"    pm.expect(response.type).to.eql(\"artist\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains id\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "1URnnhqYAYcrqrcwql10ft"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Several Artists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains artists\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
													"});\r",
													"\r",
													"pm.test(\"Artists to be in an array\", function (){\r",
													"    pm.expect(response.artists).to.be.an(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"Array length should be equal to the number of artist ids\", () => {\r",
													"    pm.expect(response.artists.length).to.be.eql(3)\r",
													"});\r",
													"\r",
													"pm.test(\"Every artist ID must be valid\", function() {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    for (let artist of response.artists) {\r",
													"        pm.expect(artist).not.to.equal(null);\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists?ids=1OQa8VMULlbmbFmDcdfBZj,0SfsnGyD8FpIN4U4WCkBZ5,5K4W6rqBFWDnAN6FQUkS6x",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists"
											],
											"query": [
												{
													"key": "ids",
													"value": "1OQa8VMULlbmbFmDcdfBZj,0SfsnGyD8FpIN4U4WCkBZ5,5K4W6rqBFWDnAN6FQUkS6x"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist's Albums",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Type should be album\", function () {\r",
													"    pm.expect(response.items[0].type).to.eql(\"album\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id/albums",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id",
												"albums"
											],
											"variable": [
												{
													"key": "id",
													"value": "1OQa8VMULlbmbFmDcdfBZj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow artists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist&ids=3TVXtAsR1Inumwj472S9r4,1cXi8ALPQCBHZbf0EgP4Ey,4MCBfE4596Uoi2O4DtmEMz",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": "3TVXtAsR1Inumwj472S9r4,1cXi8ALPQCBHZbf0EgP4Ey,4MCBfE4596Uoi2O4DtmEMz"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unfollow Artists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist&ids=1cXi8ALPQCBHZbf0EgP4Ey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": "1cXi8ALPQCBHZbf0EgP4Ey"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist's Top Tracks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json()\r",
													"pm.test(\"Response is an object\", () => {\r",
													"    pm.expect(response).to.be.an(\"object\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains \\\"artist\\\"\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artist\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id/top-tracks?market=RO",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id",
												"top-tracks"
											],
											"query": [
												{
													"key": "market",
													"value": "RO"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "1OQa8VMULlbmbFmDcdfBZj"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative testing",
							"item": [
								{
									"name": "Get Artist -no id value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist - invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist - multiple artists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "1OQa8VMULlbmbFmDcdfBZj,0SfsnGyD8FpIN4U4WCkBZ5,5K4W6rqBFWDnAN6FQUkS6x"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist - album instead of an artist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Non existing id: 'spotify:artist:4CKrRK52g4mNzbpGIMVbtE'\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "4CKrRK52g4mNzbpGIMVbtE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist - playlist instead of an artist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Non existing id: 'spotify:artist:5Q0hJmxrDjRfXWy0jGCCjx'\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "5Q0hJmxrDjRfXWy0jGCCjx"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist - track instead of an artist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Non existing id: 'spotify:artist:37i9dQZF1DWYnx77Gg1Rgu'\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "37i9dQZF1DWYnx77Gg1Rgu"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Several Artists - no ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists?ids=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists"
											],
											"query": [
												{
													"key": "ids",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Several Artists - one invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains artists\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
													"});\r",
													"\r",
													"pm.test(\"Artists to be in an array\", function (){\r",
													"    pm.expect(response.artists).to.be.an(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"Array length should be equal to the number of artist ids\", () => {\r",
													"    pm.expect(response.artists.length).to.be.eql(3)\r",
													"});\r",
													"\r",
													"pm.test(\"Invalid artist Id found\", function() {\r",
													"    const response = pm.response.json();\r",
													"    let invalidIndex = -1;\r",
													"\r",
													"    for (let i = 0; i < response.artists.length; i++) {\r",
													"        if (response.artists[i] === null) {\r",
													"            invalidIndex = i;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.expect(invalidIndex).to.equal(2, `Invalid artist ID found at index ${invalidIndex}`);\r",
													"    // here if we set the value of 2 to -1 it'll will find the invalid Id\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"\r",
													"console.log(response.artists)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists?ids=1OQa8VMULlbmbFmDcdfBZj,0SfsnGyD8FpIN4U4WCkBZ5,5555555555555555555555555555555555",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists"
											],
											"query": [
												{
													"key": "ids",
													"value": "1OQa8VMULlbmbFmDcdfBZj,0SfsnGyD8FpIN4U4WCkBZ5,5555555555555555555555555555555555"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Several Artists - several invalid IDs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains artists\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
													"});\r",
													"\r",
													"pm.test(\"Artists to be in an array\", function (){\r",
													"    pm.expect(response.artists).to.be.an(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"Array length should be equal to the number of artist ids\", () => {\r",
													"    pm.expect(response.artists.length).to.be.eql(3)\r",
													"});\r",
													"\r",
													"pm.test(\"Every artist ID must be valid\", function() {\r",
													"    const response = pm.response.json();\r",
													"    const invalidIndices = [];\r",
													"\r",
													"    for (let i = 0; i < response.artists.length; i++) {\r",
													"        if (response.artists[i] === null) {\r",
													"            invalidIndices.push(i);\r",
													"        }\r",
													"    }\r",
													"    pm.expect(invalidIndices.length).to.equal(2, `Invalid artist IDs found at indices ${invalidIndices.join(\", \")}`);\r",
													"    // here if we change 2 to 0, the script finds the invalid ids\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"console.log(response.artists)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists?ids=gfdjojghdog888,0SfsnGyD8FpIN4U4WCkBZ5,5555555555555555555555555555555555",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists"
											],
											"query": [
												{
													"key": "ids",
													"value": "gfdjojghdog888,0SfsnGyD8FpIN4U4WCkBZ5,5555555555555555555555555555555555"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Several Artists - artistId, playlistId and tracks Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains artists\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
													"});\r",
													"\r",
													"pm.test(\"Artists to be in an array\", function (){\r",
													"    pm.expect(response.artists).to.be.an(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"Array length should be equal to the number of artist ids\", () => {\r",
													"    pm.expect(response.artists.length).to.be.eql(3)\r",
													"});\r",
													"\r",
													"pm.test(\"Every artist ID must be valid\", function() {\r",
													"\r",
													"    const invalidIndices = [];\r",
													"\r",
													"    for (let i = 0; i < response.artists.length; i++) {\r",
													"        if (response.artists[i] === null) {\r",
													"            invalidIndices.push(i);\r",
													"        }\r",
													"    }\r",
													"    pm.expect(invalidIndices.length).to.eql(2, `Invalid artist IDs found at indices ${invalidIndices.join(\", \")}`);\r",
													"    // here if we change 2 to 0, the script finds the invalid ids\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"console.log(response.artists)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists?ids=0SfsnGyD8FpIN4U4WCkBZ5,37i9dQZF1DWYnx77Gg1Rgu,5Q0hJmxrDjRfXWy0jGCCjx",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists"
											],
											"query": [
												{
													"key": "ids",
													"value": "0SfsnGyD8FpIN4U4WCkBZ5,37i9dQZF1DWYnx77Gg1Rgu,5Q0hJmxrDjRfXWy0jGCCjx"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Several Artists - playlistId and tracks Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains artists\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
													"});\r",
													"\r",
													"pm.test(\"Artists to be in an array\", function (){\r",
													"    pm.expect(response.artists).to.be.an(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"Array length should be equal to the number of artist ids\", () => {\r",
													"    pm.expect(response.artists.length).to.be.eql(2)\r",
													"});\r",
													"\r",
													"pm.test(\"Every artist ID must be valid\", function() {\r",
													"\r",
													"    const invalidIndices = [];\r",
													"\r",
													"    for (let i = 0; i < response.artists.length; i++) {\r",
													"        if (response.artists[i] === null) {\r",
													"            invalidIndices.push(i);\r",
													"        }\r",
													"    }\r",
													"    pm.expect(invalidIndices.length).to.eql(2, `Invalid artist IDs found at indices ${invalidIndices.join(\", \")}`);\r",
													"    // here if we change 2 to 0, the script finds the invalid ids\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"console.log(response.artists)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists?ids=37i9dQZF1DWYnx77Gg1Rgu,5Q0hJmxrDjRfXWy0jGCCjx",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists"
											],
											"query": [
												{
													"key": "ids",
													"value": "37i9dQZF1DWYnx77Gg1Rgu,5Q0hJmxrDjRfXWy0jGCCjx"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist's Albums - invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id/albums",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id",
												"albums"
											],
											"variable": [
												{
													"key": "id",
													"value": "55555555555555555555555"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist's Albums - no id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id/albums",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id",
												"albums"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist's Albums - album id instead of artist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Non existing id: '5MS3MvWHJ3lOZPLiMxzOU6'\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response to have header\", function (){\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5 seconds\",() => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id/albums",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id",
												"albums"
											],
											"variable": [
												{
													"key": "id",
													"value": "5MS3MvWHJ3lOZPLiMxzOU6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow artists - invalid ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"Bad request.\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist&ids=553TVXtAsR1Inumwj472S9r4,5551cXi8ALP55QCBHZbf0EgP4Ey,45555MCBfE4596Uoi2O4D555tmEMz",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": "553TVXtAsR1Inumwj472S9r4,5551cXi8ALP55QCBHZbf0EgP4Ey,45555MCBfE4596Uoi2O4D555tmEMz"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow artists - no ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"Bad request.\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist&ids=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow artists - replace artist with playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"Bad request.\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/me/following?type=playlist&ids=37i9dQZF1DWYnx77Gg1Rgu",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "playlist"
												},
												{
													"key": "ids",
													"value": "37i9dQZF1DWYnx77Gg1Rgu"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow artists - replace artist with album id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"Bad request.\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/me/following?type=album&ids=4CKrRK52g4mNzbpGIMVbtE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "album"
												},
												{
													"key": "ids",
													"value": "4CKrRK52g4mNzbpGIMVbtE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unfollow Artists - no ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"Bad request.\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist&ids=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unfollow Artists - invalid ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response contains error\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"Bad request.\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/me/following?type=artist&ids=66655555555555566666664.12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"me",
												"following"
											],
											"query": [
												{
													"key": "type",
													"value": "artist"
												},
												{
													"key": "ids",
													"value": "66655555555555566666664.12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Artist's Top Tracks - invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json()\r",
													"pm.test(\"Response is an object\", () => {\r",
													"    pm.expect(response).to.be.an(\"object\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains \\\"error\\\"\", function (){\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should be \\\"invalid id\\\"\" , function () {\r",
													"    pm.expect(response.error.message).to.eql(\"invalid id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/artists/:id/top-tracks?market=RO",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"artists",
												":id",
												"top-tracks"
											],
											"query": [
												{
													"key": "market",
													"value": "RO"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "43424grfergrg$"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Playlists",
			"item": [
				{
					"name": "Equivalence Partitioning",
					"item": [
						{
							"name": "Positive Testing",
							"item": [
								{
									"name": "Create Playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.collectionVariables.set(\"createdPlaylistId\", response.id)\r",
													"\r",
													"pm.test(\"Response is an object\", () => {\r",
													"    pm.expect(response).to.be.an(\"object\")\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"\r",
													"pm.test(\"access-control-allow-methods header is true\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.eql(\"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Request made playlist\",\r\n    \"public\": true,\r\n    \"collaborative\": false,\r\n    \"description\":\"This playlist has been made using Postman\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:user_id/playlists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":user_id",
												"playlists"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{userId}}"
												}
											]
										},
										"description": "StartFragment\n\nCreate a playlist for a Spotify user. (The playlist will be empty until you [add tracks](https://developer.spotify.com/documentation/web-api/reference/add-tracks-to-playlist).)\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get Playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nGet a playlist owned by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get User's Playlists",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:user_id/playlists?limit=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":user_id",
												"playlists"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{userId}}"
												}
											]
										},
										"description": "StartFragment\n\nGet a list of the playlists owned or followed by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Add Items to Playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"pm.collectionVariables.set(\"snapshotId\", response.snapshot_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"uris\": [\r\n        \"spotify:track:5TNhjanmvwvmjCz2WYwSAv\", \"spotify:track:4EWCNWgDS8707fNSZ1oaA5\"\r\n    ],\r\n    \"position\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nAdd one or more items to a user's playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Remove Playlist Items",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"tracks\": [\r\n        {\r\n            \"uri\": \"spotify:track:5TNhjanmvwvmjCz2WYwSAv\"\r\n        },\r\n        {\r\n            \"uri\": \"spotify:track:4EWCNWgDS8707fNSZ1oaA5\"\r\n        }\r\n    ],\r\n    \"snapshot_id\": \"{{snapshotId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nRemove one or more items from a user's playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Add Custom Playlist Cover Image",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "image/jpeg",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/images",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"images"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nReplace the image used to represent a specific playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get Playlist Cover Image",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/images",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"images"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nGet the current image associated with a specific playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Change Playlist Details",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"My Updated Playlist Title\",\r\n  \"public\": true,\r\n  \"collaborative\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nChange a playlist's name and public/private state. (The user must, of course, own the playlist.)\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get Playlist Items",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nGet full details of the items of a playlist owned by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Reorder Items In Playlist",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"range_start\": 0,\r\n    \"insert_before\": 3,\r\n    \"range_length\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nEither reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\n\n  \n\n**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Replace Items in playlist",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:track:2RJAKIw6nIkgZVsAIKhmqz\", \"spotify:track:4Li2WHPkuyCdtmokzW2007\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{createdPlaylistId}}"
												}
											]
										},
										"description": "StartFragment\n\nEither reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\n\n  \n\n**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Follow Playlist",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/followers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"followers"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{playlist_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unfollow Playlist",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:id/followers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":id",
												"followers"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{playlist_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check if Users Follow Playlist",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/followers/contains?ids={{userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"followers",
												"contains"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{userId}}"
												}
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{playlist_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Testing",
							"item": [
								{
									"name": "Create Playlist - no user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.collectionVariables.set(\"createdPlaylistId\", response.id)\r",
													"\r",
													"pm.test(\"Response is an object\", () => {\r",
													"    pm.expect(response).to.be.an(\"object\")\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Expected to have an error\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Getting the correct error message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid username\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"access-control-allow-methods header is present\", function () {\r",
													"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
													"});\r",
													"\r",
													"pm.test(\"access-control-allow-methods header is true\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.eql(\"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Request made playlist\",\r\n    \"public\": true,\r\n    \"collaborative\": false,\r\n    \"description\":\"This playlist has been made using Postman\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:user_id/playlists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":user_id",
												"playlists"
											],
											"variable": [
												{
													"key": "user_id",
													"value": ""
												}
											]
										},
										"description": "StartFragment\n\nCreate a playlist for a Spotify user. (The playlist will be empty until you [add tracks](https://developer.spotify.com/documentation/web-api/reference/add-tracks-to-playlist).)\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Create Playlist - another user's id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.collectionVariables.set(\"createdPlaylistId\", response.id)\r",
													"\r",
													"pm.test(\"Response is an object\", () => {\r",
													"    pm.expect(response).to.be.an(\"object\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Expected to have an error\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Getting the correct error message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"You cannot create a playlist for another user.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"access-control-allow-methods header is present\", function () {\r",
													"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
													"});\r",
													"\r",
													"pm.test(\"access-control-allow-methods header is true\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.eql(\"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Request made playlist\",\r\n    \"public\": true,\r\n    \"collaborative\": false,\r\n    \"description\":\"This playlist has been made using Postman\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:user_id/playlists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":user_id",
												"playlists"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "fshfssf3244"
												}
											]
										},
										"description": "StartFragment\n\nCreate a playlist for a Spotify user. (The playlist will be empty until you [add tracks](https://developer.spotify.com/documentation/web-api/reference/add-tracks-to-playlist).)\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get Playlist - no playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid playlist Id\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": ""
												}
											]
										},
										"description": "StartFragment\n\nGet a playlist owned by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get Playlist - invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid playlist Id\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "rg#"
												}
											]
										},
										"description": "StartFragment\n\nGet a playlist owned by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get Playlist - album id instead of playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "4UlGauD7ROb3YbVOFMgW5u"
												}
											]
										},
										"description": "StartFragment\n\nGet a playlist owned by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Get User's Playlists - invalid limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid limit\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:user_id/playlists?limit=51",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":user_id",
												"playlists"
											],
											"query": [
												{
													"key": "limit",
													"value": "51"
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{userId}}"
												}
											]
										},
										"description": "StartFragment\n\nGet a list of the playlists owned or followed by a Spotify user.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Add Items to Playlist - another user playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"pm.collectionVariables.set(\"snapshotId\", response.snapshot_id)\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"You cannot add tracks to a playlist you don't own.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"uris\": [\r\n        \"spotify:track:5TNhjanmvwvmjCz2WYwSAv\", \"spotify:track:4EWCNWgDS8707fNSZ1oaA5\"\r\n    ],\r\n    \"position\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{anotherUserPlaylist}}"
												}
											]
										},
										"description": "StartFragment\n\nAdd one or more items to a user's playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Add Items to Playlist - invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"pm.collectionVariables.set(\"snapshotId\", response.snapshot_id)\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid playlist Id\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"uris\": [\r\n        \"spotify:track:5TNhjanmvwvmjCz2WYwSAv\", \"spotify:track:4EWCNWgDS8707fNSZ1oaA5\"\r\n    ],\r\n    \"position\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "ffffffffffffff"
												}
											]
										},
										"description": "StartFragment\n\nAdd one or more items to a user's playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Remove Playlist Items - another user playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Missing or bad version tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"tracks\": [\r\n        {\r\n            \"uri\": \"spotify:track:5TNhjanmvwvmjCz2WYwSAv\"\r\n        },\r\n        {\r\n            \"uri\": \"spotify:track:4EWCNWgDS8707fNSZ1oaA5\"\r\n        }\r\n    ],\r\n    \"snapshot_id\": \"{{snapshotId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{anotherUserPlaylist}}"
												}
											]
										},
										"description": "StartFragment\n\nRemove one or more items from a user's playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Add Custom Playlist Cover Image - another user playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Unauthorized.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "image/jpeg",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "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"
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/images",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"images"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{anotherUserPlaylist}}"
												}
											]
										},
										"description": "StartFragment\n\nReplace the image used to represent a specific playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Add Custom Playlist Cover Image - invalid playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid playlist Id\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "image/jpeg",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/images",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"images"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "gyug"
												}
											]
										},
										"description": "StartFragment\n\nReplace the image used to represent a specific playlist.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Change Playlist Details - another playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"My Updated Playlist Title\",\r\n  \"public\": true,\r\n  \"collaborative\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{anotherUserPlaylist}}"
												}
											]
										},
										"description": "StartFragment\n\nChange a playlist's name and public/private state. (The user must, of course, own the playlist.)\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Change Playlist Details - invalid playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid playlist Id\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"My Updated Playlist Title\",\r\n  \"public\": true,\r\n  \"collaborative\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "hdgdh"
												}
											]
										},
										"description": "StartFragment\n\nChange a playlist's name and public/private state. (The user must, of course, own the playlist.)\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Reorder Items In Playlist - another user playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"You cannot reorder tracks from a playlist you don't own.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"range_start\": 0,\r\n    \"insert_before\": 3,\r\n    \"range_length\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{anotherUserPlaylist}}"
												}
											]
										},
										"description": "StartFragment\n\nEither reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\n\n  \n\n**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Replace Items in playlist - another user playlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"You cannot add tracks to a playlist you don't own.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:track:2RJAKIw6nIkgZVsAIKhmqz\", \"spotify:track:4Li2WHPkuyCdtmokzW2007\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/tracks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"tracks"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "{{anotherUserPlaylist}}"
												}
											]
										},
										"description": "StartFragment\n\nEither reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\n\n  \n\n**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request.\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Follow Playlist - invalid playlist id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is the correct one\", function () {\r",
													"    pm.expect(response.error.message).to.eql(\"Invalid playlist Id\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/playlists/:playlist_id/followers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"playlists",
												":playlist_id",
												"followers"
											],
											"variable": [
												{
													"key": "playlist_id",
													"value": "gsf"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"access-control-allow-methods header is present\", function () {",
							"    pm.response.to.have.header(\"access-control-allow-methods\");",
							"});",
							"",
							"pm.test(\"access-control-allow-methods header is true\", ()=> {",
							"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.eql(\"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Get current user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"pm.collectionVariables.set(\"userId\", response.id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/me",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Available Genre Seeds",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/recommendations/available-genre-seeds",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"recommendations",
						"available-genre-seeds"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Available Markets",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/markets",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"markets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for Item",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/search?q=artist:Irina%20Rimes&type=artist",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "artist:Irina%20Rimes"
						},
						{
							"key": "type",
							"value": "artist"
						},
						{
							"key": "market",
							"value": "RO",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "3",
							"disabled": true
						}
					]
				},
				"description": "StartFragment\n\nGet Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string.\n\nEndFragment"
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "ugc-image-upload user-read-playback-state user-modify-playback-state user-read-currently-playing playlist-read-private  playlist-read-collaborative playlist-modify-private playlist-modify-public user-follow-modify user-follow-read user-read-playback-position user-top-read user-read-recently-played user-library-modify user-library-read",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{authUrl}}/authorize",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{authUrl}}/api/token",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{clientSecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{clientId}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://oauth.pstmn.io/v1/browser-callback",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.clear()"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 4 seconds\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(4001);",
					"});",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientId",
			"value": "1bb82e90951e49e6bc53f21cb01c7650"
		},
		{
			"key": "clientSecret",
			"value": "a660c8f5defd4174afac09491b71adb6"
		},
		{
			"key": "authUrl",
			"value": "https://accounts.spotify.com"
		},
		{
			"key": "baseUrl",
			"value": "https://api.spotify.com/v1"
		},
		{
			"key": "userId",
			"value": "31ynuzmqfuz6o72kq4aa2scq7oeu"
		},
		{
			"key": "createdPlaylistId",
			"value": "2P5RWpWj9gRuO5em7s8jdh"
		},
		{
			"key": "snapshotId",
			"value": ""
		},
		{
			"key": "playlist_id",
			"value": "37i9dQZF1DZ06evO0ECSIM",
			"type": "string"
		},
		{
			"key": "anotherUserPlaylist",
			"value": "44Lt8cv70qINgcmWyg9hiz"
		}
	]
}